import { ChangeDetectorRef, Component, OnInit } from "@angular/core";
import { ActivatedRoute, Router } from "@angular/router";
import { Application } from "src/app/models/application.model";
import { Employee, User } from 'src/app/models/user.model';
import { ApplicationService } from "src/app/services/application.service";
import { UserService } from "src/app/services/user.service";
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { Job } from "src/app/models/job.model";
import { JobService } from "src/app/services/job.service";

@Component({
    templateUrl: "./employer-shortlist-candidate.component.html",
    styleUrls: ['./employer-shortlist-candidate.component.css'],
  })
export class EmployerShortListCandidateComponent implements OnInit {

  applications: Application[];
  applicationId: number;
  currentPage: number = 0;
  totalPages : number;
  pageSize : number;
  showAppointmentForm: boolean = false;
  eventForm: FormGroup;
  meetLink: string | null = null;
  authUrl: string = '';
  eventData: any = null; // L∆∞u s·ª± ki·ªán t·∫°m th·ªùi tr∆∞·ªõc khi x√°c th·ª±c

  constructor(
    private userService: UserService,
    private applicationService: ApplicationService,
    private jobService: JobService,
    private router: Router,
    private formBuilder: FormBuilder,
    private http: HttpClient
  ) {
    this.eventForm = this.formBuilder.group({
      summary: ['', Validators.required],
      location: ['Online'],
      description: ['', Validators.required],
      startDateTime: ['', Validators.required],
      endDateTime: ['', Validators.required]
    });
  }
  user: User;
  employee: Employee;
  application: Application;
  job: Job;
  ngOnInit(): void {
    const user = JSON.parse(localStorage.getItem('user'));
    const employer = JSON.parse(localStorage.getItem('employer'));
    if (!user) {
      this.router.navigate(['/']); // ƒêi·ªÅu h∆∞·ªõng l·∫°i n·∫øu kh√¥ng t√¨m th·∫•y user
    } else {
      this.user = user; // G√°n d·ªØ li·ªáu ng∆∞·ªùi d√πng
      this.employee = employer;
      this.loadData();
    }

    this.applicationService.authUrl().then(
      (res) => {
        this.authUrl =  res.authUrl;
      }
    )

     // üîπ L·∫•y applicationId t·ª´ localStorage n·∫øu c√≥
     const storedApplicationId = localStorage.getItem('applicationId');
     if (storedApplicationId) {
         this.applicationId = parseInt(storedApplicationId); // √âp ki·ªÉu v·ªÅ s·ªë
         console.log("üìå ApplicationId l·∫•y t·ª´ localStorage:", this.applicationId);
     } else {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y applicationId trong localStorage!");
  }

     console.log(this.applicationId);

     // üîπ X·ª≠ l√Ω callback OAuth (n·∫øu c√≥ `code`)
     this.handleOAuthCallback();

     const urlParams = new URLSearchParams(window.location.search);
     const authSuccess = urlParams.get('authSuccess');

    if (authSuccess) {
      alert("X√°c th·ª±c Google th√†nh c√¥ng! Gi·ªù ƒëang t·∫°o s·ª± ki·ªán...");

      // üîπ L·∫•y d·ªØ li·ªáu s·ª± ki·ªán t·ª´ localStorage
      const eventDataString = localStorage.getItem("eventData");
      if (eventDataString) {
        this.eventData = JSON.parse(eventDataString);
        localStorage.removeItem("eventData"); // X√≥a d·ªØ li·ªáu sau khi d√πng

        // üîπ T·ª± ƒë·ªông g·ªçi createEvent() ƒë·ªÉ t·∫°o Google Meet
        this.createEvent();
      } else {
        alert("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i!");
      }

      // X√≥a query params kh·ªèi URL
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }

  loadData(): void {
    this.applicationService.findByEmployerId(this.user.id, this.currentPage, 2).then(
      (res) => {
        this.applications = res["data"]["content"];
        this.totalPages = res["data"]["totalPages"];
        this.pageSize = res["data"]["size"];
      }
    );
    
  }
  // H√†m ƒë·ªÉ chuy·ªÉn trang
  changePage(page: number): void {
    if (page >= 0 && page < this.totalPages) {
      this.currentPage = page;
      this.loadData();
    }
  }

  getPages(): number[] {
    const pages = [];
    for (let i = 0; i < this.totalPages; i++) {
      pages.push(i);
    }
    return pages;
  }

  toggleAppointmentForm(applicationId: number) {
    this.showAppointmentForm = !this.showAppointmentForm;
    this.applicationId = applicationId; // L∆∞u applicationId v√†o bi·∫øn class
    localStorage.setItem('applicationId', applicationId.toString()); // L∆∞u v√†o localStorage
  }

  prepareEventCreation() {
    if (this.eventForm.valid) {
        const eventData = this.eventForm.value;
        console.log(eventData);
        // üîπ L∆∞u d·ªØ li·ªáu s·ª± ki·ªán v√†o Backend tr∆∞·ªõc khi x√°c th·ª±c
        this.applicationService.saveEventData(eventData).then(() => {
            // üîπ Ki·ªÉm tra xem ƒë√£ x√°c th·ª±c ch∆∞a
            this.applicationService.checkAuth().then((isAuthenticated) => {
                if (isAuthenticated) {
                    // N·∫øu ƒë√£ x√°c th·ª±c, t·∫°o s·ª± ki·ªán lu√¥n
                    this.createEvent();
                } else {
                    // N·∫øu ch∆∞a, chuy·ªÉn h∆∞·ªõng ƒë·∫øn Google ƒë·ªÉ x√°c th·ª±c
                    window.location.href = this.authUrl;
                }
            });
        }).catch(err => {
            alert("‚ùå L·ªói khi l∆∞u s·ª± ki·ªán tr∆∞·ªõc khi x√°c th·ª±c.");
            console.error(err);
        });
    } else {
        alert("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin tr∆∞·ªõc khi t·∫°o s·ª± ki·ªán!");
    }
}




handleOAuthCallback() {
  const urlParams = new URLSearchParams(window.location.search);
  const authSuccess = urlParams.get('authSuccess');

  if (authSuccess) {
      alert("‚úÖ X√°c th·ª±c Google th√†nh c√¥ng! ƒêang l·∫•y d·ªØ li·ªáu s·ª± ki·ªán...");

      // üîπ L·∫•y l·∫°i d·ªØ li·ªáu s·ª± ki·ªán t·ª´ Backend
      this.applicationService.getEventData().then((eventData) => {
          if (eventData) {
              console.log("üìå D·ªØ li·ªáu s·ª± ki·ªán sau x√°c th·ª±c:", eventData);

              // üîπ G·ªçi `createEvent()` ƒë·ªÉ t·∫°o Google Meet
              this.createEvent(eventData);
          } else {
              alert("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i!");
          }
      }).catch(err => {
          console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu s·ª± ki·ªán t·ª´ Backend:", err);
      });

      // üîπ X√≥a query params kh·ªèi URL
      window.history.replaceState({}, document.title, window.location.pathname);
  }
}

createEvent(eventData?: any) {
  const formattedStartDate = this.formatDateTime(eventData.startDateTime);
  const formattedEndDate = this.formatDateTime(eventData.endDateTime);

  if (!eventData) {
      alert("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu s·ª± ki·ªán ƒë·ªÉ t·∫°o Google Meet.");
      return;
  }

  console.log("üìå G·ª≠i d·ªØ li·ªáu s·ª± ki·ªán l√™n backend:", eventData);

  this.applicationService.createMeeting(eventData).then(
      (res) => {
          console.log("üîπ Response t·ª´ backend:", res);
          if (res.meetLink) {
              this.meetLink = res.meetLink;
              
              this.applicationService
              .findById(this.applicationId)
              .then((res) => {
                this.application = res['data'];
                console.log(this.applicationId);
                let interview = {
                  applicationId: this.applicationId,
                  scheduledAt: eventData.startDateTime,
                  interviewLink: this.meetLink,
                  status: 1,
                }
                this.applicationService.saveInterview(interview).then(
                  (res) => {
                    console.log("L∆∞u interview: " + res);
                  }
                )
                // Sau ƒë√≥ ƒëi t√¨m seeker d·ª±a v√†o application
                if (this.application) {
                  this.jobService.findById(this.application.jobId).then(
                    (res) => {
                      this.job = res;
                      if(this.job) {
                        this.userService
                        .findById(this.application.seekerId)
                        .then((res) => {
                          this.user = res['data'];
                          if (this.user) {
                            this.applicationService.getEventData().then(
                              (res) => {
                                const emailContent = `
                                <div style="max-width: 600px; margin: 20px auto; font-family: Arial, sans-serif; border: 1px solid #ddd; border-radius: 8px; overflow: hidden; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                                  <div style="background-color: #28a745; color: white; padding: 20px; text-align: center; font-size: 20px; font-weight: bold;">
                                    Th∆∞ M·ªùi Ph·ªèng V·∫•n - ${this.employee['data']['companyName']}
                                  </div>
                                  <div style="padding: 20px; color: #333;">
                                    <p>Xin ch√†o <strong>${this.user.username}</strong>,</p>
                                    <p>Ch√∫c m·ª´ng! Nh√† tuy·ªÉn d·ª•ng <strong>${this.employee['data']['companyName']}</strong> ƒë√£ xem h·ªì s∆° c·ªßa b·∫°n v√† mu·ªën m·ªùi b·∫°n tham gia ph·ªèng v·∫•n.</p>
                              
                                    <h3 style="color: #28a745;">üìÖ Th√¥ng tin l·ªãch ph·ªèng v·∫•n:</h3>
                                    <div style="background: #f8f9fa; padding: 15px; border-left: 4px solid #28a745; margin: 15px 0;">
                                      <p><strong>üîπ V·ªã tr√≠:</strong> ${this.job.title}</p>
                                      <p><strong>üìç ƒê·ªãa ƒëi·ªÉm:</strong> ${this.job.address} (Ho·∫∑c online)</p>
                                      <p><strong>üí∞ M·ª©c l∆∞∆°ng:</strong> ${this.job.salary}</p>
                                      <p><strong>‚è∞ Th·ªùi gian:</strong> ${formattedStartDate} - ${formattedEndDate}</p>
                                      <p><strong>üìÖ Ng√†y:</strong> ${new Date(res.startDateTime).toLocaleDateString()}</p>
                                    </div>
                              
                                    <h3 style="color: #007bff;">üé• Tham gia ph·ªèng v·∫•n tr·ª±c tuy·∫øn</h3>
                                    <p>Bu·ªïi ph·ªèng v·∫•n s·∫Ω ƒë∆∞·ª£c t·ªï ch·ª©c qua Google Meet. Vui l√≤ng nh·∫•p v√†o ƒë∆∞·ªùng link d∆∞·ªõi ƒë√¢y ƒë·ªÉ tham gia:</p>
                                    <p style="text-align: center; margin: 20px 0;">
                                      <a href="${this.meetLink}" target="_blank" 
                                        style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; font-size: 16px;">
                                        üöÄ Tham gia Ph·ªèng v·∫•n
                                      </a>
                                    </p>
                              
                                    <p><strong>üìå L∆∞u √Ω:</strong> Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† chu·∫©n b·ªã tr∆∞·ªõc c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn v·ªã tr√≠ c√¥ng vi·ªác.</p>
                              
                                    <p>Ch√∫ng t√¥i ch√∫c b·∫°n m·ªôt bu·ªïi ph·ªèng v·∫•n su√¥n s·∫ª v√† th√†nh c√¥ng! üí™</p>
                                    <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© h·ªó tr·ª£</p>
                                  </div>
                                  
                                  <div style="background-color: #f1f1f1; text-align: center; padding: 10px; font-size: 12px; color: #666;">
                                    ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.
                                  </div>
                                </div>
                              `;
          
          
          
                                const email = {
                                  from: 'truongvanhuong221196@gmail.com',
                                  to: this.user.email,
                                  subject: 'X√°c th·ª±c t√†i kho·∫£n',
                                  content: emailContent,
                                };
                                this.userService.sendEmail(email).then(
                                  (res) => {
                                    console.log(res);
                                  },
                                  (err) => {
                                    console.log('G·ª≠i mail kh√¥ng th√†nh c√¥ng');
                                  }
                                );
                              }
                            )
                           
                          }
                        });
                      }
                    }
                  );
         
                }
              });
             
              // alert("üéâ S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\nGoogle Meet Link: " + this.meetLink);
          } else {
              alert("‚ùå S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o nh∆∞ng kh√¥ng c√≥ Google Meet link.");
          }
      },
      (err) => {
          console.error("üö® L·ªói khi t·∫°o s·ª± ki·ªán:", err);
      }
  );
}

formatDateTime(dateTime: string): string {
  const options: Intl.DateTimeFormatOptions = {
      weekday: 'long',  // Hi·ªÉn th·ªã th·ª©
      day: '2-digit',
      month: 'long',  // Hi·ªÉn th·ªã th√°ng d∆∞·ªõi d·∫°ng ch·ªØ
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false, // S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng 24 gi·ªù (n·∫øu mu·ªën AM/PM, ƒë·∫∑t th√†nh `true`)
      timeZoneName: 'short' // Hi·ªÉn th·ªã m√∫i gi·ªù (n·∫øu c·∫ßn)
  };
  
  return new Date(dateTime).toLocaleDateString('vi-VN', options);
}


}